// Time Complexity : O(n) 
// Space Complexity : O(n) length of word
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this :
deciding hash set 

// Your code here along with comments explaining your approach
class Solution {
    public boolean isIsomorphic(String s, String t) {
        int n = s.length();
        int m = s.length();
        if(n != m)
            return false;
        else
        {
            HashMap<Character,Character> s_map = new HashMap<>();
            
           Set<Character> t_set = new HashSet<Character>();
            
           for(int i=0; i<n; i++ )
            {
                Character s_char = s.charAt(i);
                Character t_char = t.charAt(i);
                //System.out.println("s_char = "+ s_char+" t_char = "+ t_char);
               if(s_map.containsKey(s_char))
               {
                    //System.out.println("contains");
                   if(t_set.contains(t_char))
                   {
                       if(s_map.get(s_char) == t_char)
                           continue;
                       else
                           return false;
                   }
                   else
                   {
                       //System.out.println("set does not contain");
                       return false;
                   }
                       
               }
               else
               {
                  // System.out.println("does not contains");
                   if(t_set.contains(t_char))
                       return false;
                   else
                   {
                       //System.out.println("setting the value");
                       s_map.put(s_char, t_char);
                       t_set.add(t_char);
                      
                   }
  
               }
            }
        }
        return true;
    }
}
